generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  FREEZED
}

enum AccountType {
  ADMIN
  STUDENT
  OFFICIAL
  STAFF
  WORKER
  SECURITY
}

enum Gender {
  M 
  F
}

enum RoomType {
  OneSeater
  TwoSeater
  FourSeater
}

enum OutingApplicationType {
  Local
  NonLocal
}

enum ApplicationStatus {
  PENDING
  INPROGRESS
  REJECTED
  RETURNED
  COMPLETED
}

enum MessSession {
  Breakfast
  Lunch
  Snacks
  Dinner
}

enum HostelComplaintCategory {
  General 
  FoodIssues
  Electrical
  Civil
  RoomCleaning
  RestroomCleaning
  NetworkIssue
  Indisciplinary 
  Discrimination
  Harassment
  DamagetoProperty
}

enum ComplaintStatus {
  UNRESOLVED
  RESOLVED
}

enum Branch {
  CSE
  ECE
  EEE
  MECH
  CIVIL
  BIOTECH
  CHEM
  MME
}

enum Community {
  GENERAL
  OBC
  SC 
  ST  
}

enum CotStatus {
  AVAILABLE
  BOOKED
  BLOCKED
}

enum PaymentMode {
  CREDIT_CARD
  DEBIT_CARD
  NET_BANKING
  NEFT
  NEFT_Educational_Loan
  UPI
  OTHER
}

model User {
  id                      Int                 @id @default(autoincrement())
  email                   String              @unique @db.VarChar(255)
  password                String              @db.VarChar(255)
  accountType             AccountType
  createdAt               DateTime            @default(now())  @db.Timestamp(6)
  token                   String?             @default("") @db.VarChar(255) 
  resetPasswordExpiresIn  DateTime            @default(now())  @db.Timestamp(6)
  status                  AccountStatus
  instituteStudent        InstituteStudent?
  // worker                  Worker?
  // security                Security?
  official                Official?
}

model OTP {
  id            Int           @id @default(autoincrement())
  otp           String        @db.VarChar(255)
  email         String        @db.VarChar(255)
  createdAt     DateTime      @default(now())  @db.Timestamp(6)
  expiresAt     DateTime?     @db.Timestamp(6)
}

model InstituteStudent {
  id                    Int                   @id @default(autoincrement())
  regNo                 String                @db.VarChar(255)
  rollNo                String                @db.VarChar(255)
  name                  String                @db.VarChar(255)
  image                 String                @db.VarChar(255)
  year                  String                @db.VarChar(255)  
  branch                Branch
  gender                Gender
  pwd                   Boolean                                 
  community             Community
  aadhaarNumber         String                @db.VarChar(255)
  dob                   String 
  bloodGroup            String                @db.VarChar(255)
  fatherName            String                @db.VarChar(255)
  motherName            String                @db.VarChar(255)
  phone                 String                @db.VarChar(255)
  parentsPhone          String                @db.VarChar(255)
  emergencyPhone        String                @db.VarChar(255)
  address               String                @db.VarChar(1000)
  instituteFeeReceipt   String?               @db.VarChar(255)
  hostelFeeReceipt      String                @db.VarChar(255)
  amountPaid            String                @db.VarChar(255)
  paymentDate           String                @db.VarChar(255)
  paymentMode           PaymentMode
  outingRating          Decimal         
  disciplineRating      Decimal         
  userId                Int                   @unique
  user                  User                  @relation(fields: [userId], references: [id])
  outingApplication     OutingApplication[] 
  hostelBlockId         Int
  hostelBlock           HostelBlock           @relation(fields: [hostelBlockId], references: [id])
  hostelComplaints      HostelComplaint[]
  attendence            StudentAttendence?     
  cotId                 Int?                  @unique
  cot                   Cot?                  @relation(fields: [cotId], references: [id])
  messHallId            Int?                   
  messHall              MessHall?             @relation(fields: [messHallId], references: [id])
  messRating            MessRatingAndReview[]
  messRecord            StudentMessRecords?
}

model Official {
  id                      Int                     @id @default(autoincrement())
  name                    String?                 @db.VarChar(255)
  designation             String?                 @db.VarChar(255)
  gender                  Gender?      
  phone                   String?                 @db.VarChar(255)
  userId                  Int                     @unique
  user                    User                    @relation(fields: [userId], references: [id])
  hostelBlockId           Int?
  hostelBlock             HostelBlock?            @relation(fields: [hostelBlockId], references: [id], onDelete: SetNull)
  announcement            Announcement[]
  complaints              HostelComplaint[]
  outingApplications      OutingApplication[]
}

model HostelBlock {
  id                  Int           @id @default(autoincrement())
  name                String        @db.VarChar(255)
  image               String        @db.VarChar(255)
  roomType            RoomType
  gender              Gender
  floorCount          String        @db.VarChar(255)
  capacity            String        @db.VarChar(255)
  year                String        @db.VarChar(255)
  createdAt           DateTime      @default(now()) @db.Timestamp(6)
  wardens             Official[]    
  students            InstituteStudent[]
  rooms               Room[]
  outingApplications  OutingApplication[]
  hostelComplaints    HostelComplaint[]
}

model Room {
  id                  Int           @id @default(autoincrement())
  hostelBlockId       Int
  hostelBlock         HostelBlock   @relation(fields: [hostelBlockId], references: [id])
  roomNumber          Int          
  floorNumber         Int
  cots                Cot[]
  createdAt           DateTime      @default(now()) @db.Timestamp(6)
}

model Cot {
  id                  Int           @id @default(autoincrement())
  cotNo               Int
  roomId              Int
  room                Room          @relation(fields: [roomId], references: [id])
  status              CotStatus     @default(AVAILABLE)
  createdAt           DateTime      @default(now()) @db.Timestamp(6)
  student             InstituteStudent?
}

model Announcement {
  id             Int            @id @default(autoincrement())
  title          String         @db.VarChar(255)
  textContent    String         @db.VarChar(255)
  fileUrl        String[]       @db.VarChar(255)
  createdAt      DateTime       @default(now()) @db.Timestamp(6)
  createdById    Int 
  createdBy      Official       @relation(fields: [createdById], references: [id])
}

model MessHall {
  id                        Int                     @id @default(autoincrement())
  hallName                  String                  @db.VarChar(255)
  gender                    Gender
  capacity                  String                  @db.VarChar(255)
  messRatingAndReviews      MessRatingAndReview[]
  createdAt                 DateTime                @default(now()) @db.Timestamp(6)
  students                  InstituteStudent[]
  studentMessRecords        StudentMessRecords[]
}

model MessRatingAndReview {
  id              Int                   @id @default(autoincrement())
  rating          Int
  review          String                @db.VarChar(255)
  createdAt       DateTime              @default(now()) @db.Timestamp(6)
  messHallId      Int?
  messHall        MessHall?             @relation(fields: [messHallId], references: [id]) 
  session         MessSession
  createdById     Int
  createdBy       InstituteStudent      @relation(fields: [createdById], references: [id])    
}

model OutingApplication {
  id                        Int                                @default(autoincrement()) @id
  type                      OutingApplicationType               
  from                      DateTime                           
  to                        DateTime                             
  placeOfVisit              String                             @db.VarChar(255)
  purpose                   String                             @db.VarChar(255)
  status                    ApplicationStatus
  verifiedOn                DateTime?                          @default(dbgenerated("NULL"))
  verifiedById              Int?
  verifiedBy                Official?                          @relation(fields: [verifiedById], references: [id])
  returnedOn                DateTime?                          @default(dbgenerated("NULL"))
  remarks                   String?                            @db.VarChar(255)
  createdAt                 DateTime                           @default(now()) @db.Timestamp(6)
  instituteStudentId        Int                                
  instituteStudent          InstituteStudent                   @relation(fields: [instituteStudentId], references: [id])
  hostelBlockId             Int
  hostelBlock               HostelBlock                        @relation(fields: [hostelBlockId], references: [id])
}

model HostelComplaint {
  id                        Int                             @id @default(autoincrement())
  category                  HostelComplaintCategory
  about                     String                          @db.VarChar(255)
  fileUrl                   String[]                        @db.VarChar(255)
  hostelBlockId             Int                             
  hostelBlock               HostelBlock                     @relation(fields: [hostelBlockId], references: [id])
  status                    ComplaintStatus
  createdAt                 DateTime                        @default(now()) @db.Timestamp(6)
  instituteStudentId        Int                             
  instituteStudent          InstituteStudent                @relation(fields: [instituteStudentId], references: [id])
  resolvedOn                DateTime?                       @default(dbgenerated("NULL"))
  resolvedById              Int?
  resolvedBy                Official?                       @relation(fields: [resolvedById], references: [id])
}

model StudentAttendence {
  id                              Int                     @id @default(autoincrement())
  studentId                       Int                     @unique
  student                         InstituteStudent        @relation(fields: [studentId], references: [id])
  presentDays                     String[]                
  absentDays                      String[]                  
  lastUpdated                     DateTime                @default(now()) @updatedAt
}

model StudentMessRecords {
  id                              Int                     @id @default(autoincrement())
  studentId                       Int                     @unique
  student                         InstituteStudent        @relation(fields: [studentId], references: [id])
  messHallId                      Int?
  messHall                        MessHall?               @relation(fields: [messHallId], references: [id])
  availed                         Json                    @db.Json
}

// model Worker {
//   id            Int           @id @default(autoincrement())
//   staffId       String        @db.VarChar(255)
//   name          String        @db.VarChar(255)
//   designation   String        @db.VarChar(255)
//   gender        Gender       
//   phone         String        @db.VarChar(255)
//   user          User          @relation(fields: [userId], references: [id])
//   userId        Int           @unique
// }

// model Security {
//   id            Int           @id @default(autoincrement())
//   securityId    String        @db.VarChar(255)
//   name          String        @db.VarChar(255)
//   designation   String        @db.VarChar(255)
//   gender        Gender       
//   phone         String        @db.VarChar(255)
//   user          User          @relation(fields: [userId], references: [id])
//   userId        Int           @unique
//   hostelBlockId Int
//   hostelBlock   HostelBlock   @relation(fields: [hostelBlockId], references: [id])
// }

// model MedicalIssue {
//   id                            Int                         @id @default(autoincrement())
//   title                         String                      @db.VarChar(30)
//   description                   String                      @db.VarChar(1000)
//   documentUrl                   String?                     @db.VarChar(255)
//   createdAt                     DateTime                    @default(now())
//   remark                        String                      @db.VarChar(255)
//   status                        String                      @db.VarChar(255)
//   instituteStudentId            Int                         @unique
//   instituteStudent              InstituteStudent            @relation(fields: [instituteStudentId], references: [id])
// }