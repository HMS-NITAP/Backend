generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  ADMIN
  STUDENT
  OFFICIAL
  STAFF
  WORKER
  SECURITY
}

enum Gender {
  M 
  F
}

enum RoomType {
  OneSeater
  TwoSeater
  FourSeater
}

enum OutingApplicationType {
  Local
  NonLocal
}

enum ApplicationStatus {
  ACCEPTED
  REJECTED
  PENDING
}

enum MessSession {
  Breakfast
  Lunch
  Snacks
  Dinner
}

model User {
  id                      Int                 @id @default(autoincrement())
  email                   String              @unique @db.VarChar(255)
  password                String              @db.VarChar(255)
  accountType             AccountType
  createdAt               DateTime            @default(now())  @db.Timestamp(6)
  token                   String?             @default("") @db.VarChar(255) 
  resetPasswordExpiresIn  DateTime            @default(now())  @db.Timestamp(6)
  instituteStudent        InstituteStudent?
  worker                  Worker?
  security                Security?
  official                Official?
}

model OTP {
  id            Int           @id @default(autoincrement())
  otp           String        @db.VarChar(255)
  email         String        @db.VarChar(255)
  createdAt     DateTime      @default(now()) @db.Timestamptz
  expiresAt     DateTime?     @db.Timestamptz
}

model InstituteStudent {
  id                Int             @id @default(autoincrement())
  regNo             String?         @db.VarChar(255)
  rollNo            String?         @db.VarChar(255)
  name              String?         @db.VarChar(255)
  year              String?         @db.VarChar(255)  
  branch            String?         @db.VarChar(255)
  gender            Gender?
  pwd               Boolean?        
  community         String?         @db.VarChar(255)
  aadharNumber      String?         @db.VarChar(255)
  dob               DateTime?
  bloodGroup        String?         @db.VarChar(255)
  fatherName        String?         @db.VarChar(255)
  motherName        String?         @db.VarChar(255)
  phone             String?         @db.VarChar(255)
  parentsPhone      String?         @db.VarChar(255)
  emergencyPhone    String?         @db.VarChar(255)
  address           String?         @db.VarChar(1000)
  isHosteller       Boolean?
  outingRating      Decimal?         
  disciplineRating  Decimal?         
  user              User            @relation(fields: [userId],references: [id])
  userId            Int             @unique
  outingApplication OutingApplication? 
  hostelBlockId     Int
  hostelBlock       HostelBlock     @relation(fields: [hostelBlockId], references: [id])
}

model Worker {
  id            Int           @id @default(autoincrement())
  staffId       String        @db.VarChar(255)
  name          String        @db.VarChar(255)
  designation   String        @db.VarChar(255)
  gender        Gender       
  phone         String        @db.VarChar(255)
  user          User          @relation(fields: [userId], references: [id])
  userId        Int           @unique
}

model Security {
  id            Int           @id @default(autoincrement())
  securityId    String        @db.VarChar(255)
  name          String        @db.VarChar(255)
  designation   String        @db.VarChar(255)
  gender        Gender       
  phone         String        @db.VarChar(255)
  user          User          @relation(fields: [userId], references: [id])
  userId        Int           @unique
  hostelBlockId Int
  hostelBlock   HostelBlock   @relation(fields: [hostelBlockId], references: [id])
}

model Official {
  id            Int           @id @default(autoincrement())
  empId         String?       @db.VarChar(255)
  name          String?       @db.VarChar(255)
  designation   String?       @db.VarChar(255)
  gender        Gender?      
  phone         String?       @db.VarChar(255)
  user          User          @relation(fields: [userId], references: [id])
  userId        Int           @unique
  hostelBlockId Int
  hostelBlock   HostelBlock?  @relation(fields: [hostelBlockId], references: [id])
  announcement  Announcement[]
}

model HostelBlock {
  id                  Int           @id @default(autoincrement())
  name                String        @db.VarChar(255)
  image               String        @db.VarChar(255)
  roomType            RoomType
  gender              Gender
  floorCount          String        @db.VarChar(255)
  capacity            String        @db.VarChar(255)
  warderId            Int?         
  warden              Official[]    
  securityId          Int?           
  security            Security[] 
  students            InstituteStudent[]
  outingApplications  OutingApplication[]
} 

model Announcement {
  id             Int            @id @default(autoincrement())
  title          String         @db.VarChar(255)
  textContent    String         @db.VarChar(255)
  fileUrl        String         @db.VarChar(255)
  createdAt      DateTime       @default(now()) @db.Timestamp(6)
  createdById    Int 
  createdBy      Official       @relation(fields: [createdById], references: [id])
}

model MessHall {
  id                        Int           @id @default(autoincrement())
  name                      String        @db.VarChar(255)
  hallName                  String        @db.VarChar(255)
  gender                    Gender
  capacity                  String        @db.VarChar(255)
  messRatingAndReviews      MessRatingAndReview[]
}

model MessRatingAndReview {
  id              Int                   @id @default(autoincrement())
  rating          Int
  review          String                @db.VarChar(255)
  messHallId      Int
  messHall        MessHall              @relation(fields: [messHallId], references: [id]) 
  session         MessSession
}

model OutingApplication {
  id                        Int                                @default(autoincrement()) @id
  type                      OutingApplicationType               
  from                      DateTime                           
  to                        DateTime                             
  placeOfVisit              String                             @db.VarChar(255)
  purpose                   String                             @db.VarChar(255)
  status                    ApplicationStatus
  instituteStudentId        Int                                @unique
  instituteStudent          InstituteStudent                   @relation(fields: [instituteStudentId], references: [id])
  hostelBlockId             Int
  hostelBlock               HostelBlock                        @relation(fields: [hostelBlockId], references: [id])
}